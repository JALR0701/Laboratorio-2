

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Feb 03 12:50:35 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.10
    19                           ; Generated 31/07/2019 GMT
    20                           ; 
    21                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286                           
   287                           	psect	strings
   288  01B1                     __pstrings:	
   289  01B1                     stringtab:	
   290  01B1                     __stringtab:	
   291  01B1                     stringcode:	
   292                           ;	String table - string pointers are 1 byte each
   293                           
   294  01B1                     stringdir:	
   295  01B1  3001               	movlw	high stringdir
   296  01B2  008A               	movwf	10
   297  01B3  0804               	movf	4,w
   298  01B4  0A84               	incf	4,f
   299  01B5  0782               	addwf	2,f
   300  01B6                     __stringbase:	
   301  01B6  3400               	retlw	0
   302  01B7                     __end_of__stringtab:	
   303  01B7                     initMultiplex@SEGMENT_MAP:	
   304  01B7  343F               	retlw	63
   305  01B8  3406               	retlw	6
   306  01B9  345B               	retlw	91
   307  01BA  344F               	retlw	79
   308  01BB  3466               	retlw	102
   309  01BC  346D               	retlw	109
   310  01BD  347D               	retlw	125
   311  01BE  3407               	retlw	7
   312  01BF  347F               	retlw	127
   313  01C0  346F               	retlw	111
   314  01C1  3477               	retlw	119
   315  01C2  347C               	retlw	124
   316  01C3  3439               	retlw	57
   317  01C4  345E               	retlw	94
   318  01C5  3479               	retlw	121
   319  01C6  3471               	retlw	113
   320  01C7                     __end_ofinitMultiplex@SEGMENT_MAP:	
   321  0008                     _PORTDbits	set	8
   322  0008                     _PORTD	set	8
   323  0007                     _PORTC	set	7
   324  0006                     _PORTB	set	6
   325  0005                     _PORTA	set	5
   326  001F                     _ADCON0bits	set	31
   327  000B                     _INTCON	set	11
   328  001E                     _ADRESH	set	30
   329  000C                     _PIR1bits	set	12
   330  0006                     _PORTBbits	set	6
   331  0001                     _TMR0	set	1
   332  000B                     _INTCONbits	set	11
   333  009F                     _ADCON1bits	set	159
   334  008C                     _PIE1bits	set	140
   335  0096                     _IOCBbits	set	150
   336  0096                     _IOCB	set	150
   337  0081                     _OPTION_REGbits	set	129
   338  0081                     _OPTION_REG	set	129
   339  0088                     _TRISD	set	136
   340  0087                     _TRISC	set	135
   341  0086                     _TRISBbits	set	134
   342  0086                     _TRISB	set	134
   343  0085                     _TRISA	set	133
   344  0189                     _ANSELH	set	393
   345  0188                     _ANSEL	set	392
   346                           
   347                           ; #config settings
   348  0000                     
   349                           	psect	cinit
   350  0011                     start_initialization:	
   351  0011                     __initialization:	
   352                           
   353                           ; Clear objects allocated to COMMON
   354  0011  01FB               	clrf	__pbssCOMMON& (0+127)
   355  0012  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   356                           
   357                           ; Clear objects allocated to BANK0
   358  0013  1283               	bcf	3,5	;RP0=0, select bank0
   359  0014  1303               	bcf	3,6	;RP1=0, select bank0
   360  0015  01AC               	clrf	__pbssBANK0& (0+127)
   361  0016  01AD               	clrf	(__pbssBANK0+1)& (0+127)
   362  0017  01AE               	clrf	(__pbssBANK0+2)& (0+127)
   363  0018  01AF               	clrf	(__pbssBANK0+3)& (0+127)
   364  0019  01B0               	clrf	(__pbssBANK0+4)& (0+127)
   365  001A  01B1               	clrf	(__pbssBANK0+5)& (0+127)
   366  001B                     end_of_initialization:	
   367                           ;End of C runtime variable initialization code
   368                           
   369  001B                     __end_of__initialization:	
   370  001B  0183               	clrf	3
   371  001C  120A  118A  281F   	ljmp	_main	;jump to C main() function
   372                           
   373                           	psect	bssCOMMON
   374  007B                     __pbssCOMMON:	
   375  007B                     _numero_:	
   376  007B                     	ds	2
   377                           
   378                           	psect	bssBANK0
   379  002C                     __pbssBANK0:	
   380  002C                     _display2:	
   381  002C                     	ds	2
   382  002E                     _display1:	
   383  002E                     	ds	2
   384  0030                     _contador1:	
   385  0030                     	ds	1
   386  0031                     _change:	
   387  0031                     	ds	1
   388                           
   389                           	psect	cstackCOMMON
   390  0070                     __pcstackCOMMON:	
   391  0070                     ?_ISR:	
   392  0070                     ?_main:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?___wmul:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ___wmul@multiplier:	
   399                           ; 2 bytes @ 0x0
   400                           
   401                           
   402                           ; 2 bytes @ 0x0
   403  0070                     	ds	2
   404  0072                     ___wmul@multiplicand:	
   405                           
   406                           ; 2 bytes @ 0x2
   407  0072                     	ds	2
   408  0074                     ??___wmul:	
   409  0074                     ___wmul@product:	
   410                           ; 1 bytes @ 0x4
   411                           
   412                           
   413                           ; 2 bytes @ 0x4
   414  0074                     	ds	2
   415  0076                     ?___awdiv:	
   416  0076                     ___awdiv@divisor:	
   417                           ; 2 bytes @ 0x6
   418                           
   419                           
   420                           ; 2 bytes @ 0x6
   421  0076                     	ds	2
   422  0078                     ___awdiv@dividend:	
   423                           
   424                           ; 2 bytes @ 0x8
   425  0078                     	ds	2
   426  007A                     ??___awdiv:	
   427                           
   428                           ; 1 bytes @ 0xA
   429  007A                     	ds	1
   430                           
   431                           	psect	cstackBANK0
   432  0020                     __pcstackBANK0:	
   433  0020                     ___awdiv@counter:	
   434                           
   435                           ; 1 bytes @ 0x0
   436  0020                     	ds	1
   437  0021                     ___awdiv@sign:	
   438                           
   439                           ; 1 bytes @ 0x1
   440  0021                     	ds	1
   441  0022                     ___awdiv@quotient:	
   442                           
   443                           ; 2 bytes @ 0x2
   444  0022                     	ds	2
   445  0024                     ??_ISR:	
   446                           
   447                           ; 1 bytes @ 0x4
   448  0024                     	ds	4
   449  0028                     ?_initMultiplex:	
   450  0028                     initMultiplex@valor:	
   451                           ; 1 bytes @ 0x8
   452                           
   453                           
   454                           ; 2 bytes @ 0x8
   455  0028                     	ds	2
   456  002A                     ??_initMultiplex:	
   457  002A                     ??_main:	
   458                           ; 1 bytes @ 0xA
   459                           
   460                           
   461                           ; 1 bytes @ 0xA
   462  002A                     	ds	2
   463                           
   464                           	psect	maintext
   465  001F                     __pmaintext:	
   466 ;;
   467 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   468 ;;
   469 ;; *************** function _main *****************
   470 ;; Defined at:
   471 ;;		line 67 in file "ADC.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;		None
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : B00/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   485 ;;      Params:         0       0       0       0       0
   486 ;;      Locals:         0       0       0       0       0
   487 ;;      Temps:          0       2       0       0       0
   488 ;;      Totals:         0       2       0       0       0
   489 ;;Total ram usage:        2 bytes
   490 ;; Hardware stack levels required when called:    3
   491 ;; This function calls:
   492 ;;		_initMultiplex
   493 ;; This function is called by:
   494 ;;		Startup code after reset
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           
   499                           ;psect for function _main
   500  001F                     _main:	
   501  001F                     l977:	
   502                           ;incstack = 0
   503                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   504                           
   505                           
   506                           ;ADC.c: 68:     TRISA = 0;
   507  001F  1683               	bsf	3,5	;RP0=1, select bank1
   508  0020  1303               	bcf	3,6	;RP1=0, select bank1
   509  0021  0185               	clrf	5	;volatile
   510                           
   511                           ;ADC.c: 69:     TRISB = 0;
   512  0022  0186               	clrf	6	;volatile
   513  0023                     l979:	
   514                           
   515                           ;ADC.c: 70:     TRISBbits.TRISB0 = 1;
   516  0023  1406               	bsf	6,0	;volatile
   517  0024                     l981:	
   518                           
   519                           ;ADC.c: 71:     TRISBbits.TRISB1 = 1;
   520  0024  1486               	bsf	6,1	;volatile
   521                           
   522                           ;ADC.c: 72:     TRISC = 0;
   523  0025  0187               	clrf	7	;volatile
   524                           
   525                           ;ADC.c: 73:     TRISD = 0;
   526  0026  0188               	clrf	8	;volatile
   527                           
   528                           ;ADC.c: 75:     ANSEL = 0;
   529  0027  1683               	bsf	3,5	;RP0=1, select bank3
   530  0028  1703               	bsf	3,6	;RP1=1, select bank3
   531  0029  0188               	clrf	8	;volatile
   532  002A                     l983:	
   533                           
   534                           ;ADC.c: 76:     ANSELH = 0B00000001;
   535  002A  3001               	movlw	1
   536  002B  0089               	movwf	9	;volatile
   537  002C                     l985:	
   538                           
   539                           ;ADC.c: 78:     INTCON = 0;
   540  002C  018B               	clrf	11	;volatile
   541  002D                     l987:	
   542                           
   543                           ;ADC.c: 79:     INTCONbits.GIE = 1;
   544  002D  178B               	bsf	11,7	;volatile
   545  002E                     l989:	
   546                           
   547                           ;ADC.c: 80:     INTCONbits.RBIE = 1;
   548  002E  158B               	bsf	11,3	;volatile
   549  002F                     l991:	
   550                           
   551                           ;ADC.c: 81:     INTCONbits.RBIF = 0;
   552  002F  100B               	bcf	11,0	;volatile
   553  0030                     l993:	
   554                           
   555                           ;ADC.c: 82:     INTCONbits.T0IE = 1;
   556  0030  168B               	bsf	11,5	;volatile
   557  0031                     l995:	
   558                           
   559                           ;ADC.c: 83:     INTCONbits.T0IF = 0;
   560  0031  110B               	bcf	11,2	;volatile
   561  0032                     l997:	
   562                           
   563                           ;ADC.c: 85:     OPTION_REG = 0;
   564  0032  1683               	bsf	3,5	;RP0=1, select bank1
   565  0033  1303               	bcf	3,6	;RP1=0, select bank1
   566  0034  0181               	clrf	1	;volatile
   567  0035                     l999:	
   568                           
   569                           ;ADC.c: 86:     OPTION_REGbits.PS2 = 1;
   570  0035  1501               	bsf	1,2	;volatile
   571  0036                     l1001:	
   572                           
   573                           ;ADC.c: 88:     TMR0 = 99;
   574  0036  3063               	movlw	99
   575  0037  1283               	bcf	3,5	;RP0=0, select bank0
   576  0038  1303               	bcf	3,6	;RP1=0, select bank0
   577  0039  0081               	movwf	1	;volatile
   578                           
   579                           ;ADC.c: 90:     IOCB = 0;
   580  003A  1683               	bsf	3,5	;RP0=1, select bank1
   581  003B  1303               	bcf	3,6	;RP1=0, select bank1
   582  003C  0196               	clrf	22	;volatile
   583  003D                     l1003:	
   584                           
   585                           ;ADC.c: 91:     IOCBbits.IOCB0 = 1;
   586  003D  1416               	bsf	22,0	;volatile
   587  003E                     l1005:	
   588                           
   589                           ;ADC.c: 92:     IOCBbits.IOCB1 = 1;
   590  003E  1496               	bsf	22,1	;volatile
   591  003F                     l1007:	
   592                           
   593                           ;ADC.c: 94:     PIE1bits.ADIE=1;
   594  003F  170C               	bsf	12,6	;volatile
   595  0040                     l1009:	
   596                           
   597                           ;ADC.c: 95:     PIR1bits.ADIF=1;
   598  0040  1283               	bcf	3,5	;RP0=0, select bank0
   599  0041  1303               	bcf	3,6	;RP1=0, select bank0
   600  0042  170C               	bsf	12,6	;volatile
   601  0043                     l1011:	
   602                           
   603                           ;ADC.c: 98:     ADCON0bits.ADCS=01;
   604  0043  081F               	movf	31,w	;volatile
   605  0044  393F               	andlw	-193
   606  0045  3840               	iorlw	64
   607  0046  009F               	movwf	31	;volatile
   608  0047                     l1013:	
   609                           
   610                           ;ADC.c: 99:     ADCON0bits.CHS0=0;
   611  0047  111F               	bcf	31,2	;volatile
   612  0048                     l1015:	
   613                           
   614                           ;ADC.c: 100:     ADCON0bits.CHS1=0;
   615  0048  119F               	bcf	31,3	;volatile
   616  0049                     l1017:	
   617                           
   618                           ;ADC.c: 101:     ADCON0bits.CHS2=0;
   619  0049  121F               	bcf	31,4	;volatile
   620  004A                     l1019:	
   621                           
   622                           ;ADC.c: 102:     ADCON0bits.CHS3=1;
   623  004A  169F               	bsf	31,5	;volatile
   624  004B                     l1021:	
   625                           
   626                           ;ADC.c: 103:     ADCON0bits.GO_nDONE=0;
   627  004B  109F               	bcf	31,1	;volatile
   628  004C                     l1023:	
   629                           
   630                           ;ADC.c: 104:     ADCON0bits.ADON=1;
   631  004C  141F               	bsf	31,0	;volatile
   632  004D                     l1025:	
   633                           
   634                           ;ADC.c: 106:     ADCON1bits.ADFM=0;
   635  004D  1683               	bsf	3,5	;RP0=1, select bank1
   636  004E  1303               	bcf	3,6	;RP1=0, select bank1
   637  004F  139F               	bcf	31,7	;volatile
   638  0050                     l1027:	
   639                           
   640                           ;ADC.c: 107:     ADCON1bits.VCFG0=0;
   641  0050  121F               	bcf	31,4	;volatile
   642  0051                     l1029:	
   643                           
   644                           ;ADC.c: 108:     ADCON1bits.VCFG1=0;
   645  0051  129F               	bcf	31,5	;volatile
   646  0052                     l1031:	
   647                           
   648                           ;ADC.c: 110:     PORTA = 0;
   649  0052  1283               	bcf	3,5	;RP0=0, select bank0
   650  0053  1303               	bcf	3,6	;RP1=0, select bank0
   651  0054  0185               	clrf	5	;volatile
   652  0055                     l1033:	
   653                           
   654                           ;ADC.c: 111:     PORTB = 0;
   655  0055  0186               	clrf	6	;volatile
   656  0056                     l1035:	
   657                           
   658                           ;ADC.c: 112:     PORTC = 0;
   659  0056  0187               	clrf	7	;volatile
   660  0057                     l1037:	
   661                           
   662                           ;ADC.c: 113:     PORTD = 0;
   663  0057  0188               	clrf	8	;volatile
   664  0058                     l1039:	
   665                           
   666                           ;ADC.c: 114:     PORTDbits.RD1 = 1;
   667  0058  1488               	bsf	8,1	;volatile
   668  0059                     l1041:	
   669                           
   670                           ;ADC.c: 117:     contador1 = 0;
   671  0059  01B0               	clrf	_contador1
   672  005A                     l1043:	
   673                           
   674                           ;ADC.c: 120:         _delay((unsigned long)((10)*(4000000/4000.0)));
   675  005A  300D               	movlw	13
   676  005B  1283               	bcf	3,5	;RP0=0, select bank0
   677  005C  1303               	bcf	3,6	;RP1=0, select bank0
   678  005D  00AB               	movwf	??_main+1
   679  005E  30FB               	movlw	251
   680  005F  00AA               	movwf	??_main
   681  0060                     u477:	
   682  0060  0BAA               	decfsz	??_main,f
   683  0061  2860               	goto	u477
   684  0062  0BAB               	decfsz	??_main+1,f
   685  0063  2860               	goto	u477
   686  0064                     l1045:	
   687                           
   688                           ;ADC.c: 121:         ADCON0bits.GO_DONE=1;
   689  0064  1283               	bcf	3,5	;RP0=0, select bank0
   690  0065  1303               	bcf	3,6	;RP1=0, select bank0
   691  0066  149F               	bsf	31,1	;volatile
   692  0067                     l1047:	
   693                           
   694                           ;ADC.c: 122:         _delay((unsigned long)((10)*(4000000/4000.0)));
   695  0067  300D               	movlw	13
   696  0068  1283               	bcf	3,5	;RP0=0, select bank0
   697  0069  1303               	bcf	3,6	;RP1=0, select bank0
   698  006A  00AB               	movwf	??_main+1
   699  006B  30FB               	movlw	251
   700  006C  00AA               	movwf	??_main
   701  006D                     u487:	
   702  006D  0BAA               	decfsz	??_main,f
   703  006E  286D               	goto	u487
   704  006F  0BAB               	decfsz	??_main+1,f
   705  0070  286D               	goto	u487
   706                           
   707                           ;ADC.c: 124:         if(change == 1){
   708  0071  1283               	bcf	3,5	;RP0=0, select bank0
   709  0072  1303               	bcf	3,6	;RP1=0, select bank0
   710  0073  0331               	decf	_change,w
   711  0074  1D03               	btfss	3,2
   712  0075  2877               	goto	u451
   713  0076  2878               	goto	u450
   714  0077                     u451:	
   715  0077  2892               	goto	l1057
   716  0078                     u450:	
   717  0078                     l1049:	
   718                           
   719                           ;ADC.c: 125:             if (PORTDbits.RD0 == 1){
   720  0078  1C08               	btfss	8,0	;volatile
   721  0079  287B               	goto	u461
   722  007A  287C               	goto	u460
   723  007B                     u461:	
   724  007B  2886               	goto	l1053
   725  007C                     u460:	
   726  007C                     l1051:	
   727                           
   728                           ;ADC.c: 126:             initMultiplex(display1);
   729  007C  082F               	movf	_display1+1,w
   730  007D  00A9               	movwf	initMultiplex@valor+1
   731  007E  082E               	movf	_display1,w
   732  007F  00A8               	movwf	initMultiplex@valor
   733  0080  120A  118A  2191  120A  118A  	fcall	_initMultiplex
   734                           
   735                           ;ADC.c: 127:             }else{
   736  0085  288F               	goto	l1055
   737  0086                     l1053:	
   738                           
   739                           ;ADC.c: 128:             initMultiplex(display2);
   740  0086  082D               	movf	_display2+1,w
   741  0087  00A9               	movwf	initMultiplex@valor+1
   742  0088  082C               	movf	_display2,w
   743  0089  00A8               	movwf	initMultiplex@valor
   744  008A  120A  118A  2191  120A  118A  	fcall	_initMultiplex
   745  008F                     l1055:	
   746                           
   747                           ;ADC.c: 130:             change = 0;
   748  008F  1283               	bcf	3,5	;RP0=0, select bank0
   749  0090  1303               	bcf	3,6	;RP1=0, select bank0
   750  0091  01B1               	clrf	_change
   751  0092                     l1057:	
   752                           
   753                           ;ADC.c: 132:         PORTA = contador1;
   754  0092  0830               	movf	_contador1,w
   755  0093  0085               	movwf	5	;volatile
   756  0094  285A               	goto	l1043
   757  0095  120A  118A  280E   	ljmp	start
   758  0098                     __end_of_main:	
   759                           
   760                           	psect	text1
   761  0191                     __ptext1:	
   762 ;; *************** function _initMultiplex *****************
   763 ;; Defined at:
   764 ;;		line 5 in file "Multiplexar.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;  valor           2    8[BANK0 ] unsigned int 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   778 ;;      Params:         0       2       0       0       0
   779 ;;      Locals:         0       0       0       0       0
   780 ;;      Temps:          0       0       0       0       0
   781 ;;      Totals:         0       2       0       0       0
   782 ;;Total ram usage:        2 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; Hardware stack levels required when called:    2
   785 ;; This function calls:
   786 ;;		Nothing
   787 ;; This function is called by:
   788 ;;		_main
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           
   793                           ;psect for function _initMultiplex
   794  0191                     _initMultiplex:	
   795  0191                     l873:	
   796                           ;incstack = 0
   797                           ; Regs used in _initMultiplex: [wreg-fsr0h+status,2+status,0+pclath]
   798                           
   799                           
   800                           ;Multiplexar.c: 6:     unsigned char const SEGMENT_MAP[16] = {0x3F, 0x06, 0x5B, 0x4F, 0x
      +                          66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0X39, 0X5E, 0X79, 0X71};;Multiplexar.c: 7:
      +                                       if(PORTDbits.RD1 == 1){
   801  0191  1283               	bcf	3,5	;RP0=0, select bank0
   802  0192  1303               	bcf	3,6	;RP1=0, select bank0
   803  0193  1C88               	btfss	8,1	;volatile
   804  0194  2996               	goto	u241
   805  0195  2997               	goto	u240
   806  0196                     u241:	
   807  0196  29A4               	goto	l93
   808  0197                     u240:	
   809  0197                     l875:	
   810                           
   811                           ;Multiplexar.c: 8:                 PORTDbits.RD1 = 0;
   812  0197  1088               	bcf	8,1	;volatile
   813                           
   814                           ;Multiplexar.c: 9:                 PORTDbits.RD0 = 0;
   815  0198  1008               	bcf	8,0	;volatile
   816  0199                     l877:	
   817                           
   818                           ;Multiplexar.c: 10:                 PORTC = SEGMENT_MAP[valor];
   819  0199  0828               	movf	initMultiplex@valor,w
   820  019A  3E01               	addlw	low ((initMultiplex@SEGMENT_MAP-__stringbase)| (0+32768))
   821  019B  0084               	movwf	4
   822  019C  120A  118A  21B1  120A  118A  	fcall	stringdir
   823  01A1  0087               	movwf	7	;volatile
   824  01A2                     l879:	
   825                           
   826                           ;Multiplexar.c: 11:                 PORTDbits.RD0 = 1;
   827  01A2  1408               	bsf	8,0	;volatile
   828                           
   829                           ;Multiplexar.c: 12:             }else {
   830  01A3  29B0               	goto	l95
   831  01A4                     l93:	
   832                           
   833                           ;Multiplexar.c: 13:                 PORTDbits.RD0 = 0;
   834  01A4  1008               	bcf	8,0	;volatile
   835                           
   836                           ;Multiplexar.c: 14:                 PORTDbits.RD1 = 0;
   837  01A5  1088               	bcf	8,1	;volatile
   838  01A6                     l881:	
   839                           
   840                           ;Multiplexar.c: 15:                 PORTC = SEGMENT_MAP[valor+1];
   841  01A6  0828               	movf	initMultiplex@valor,w
   842  01A7  3E02               	addlw	low (((initMultiplex@SEGMENT_MAP-__stringbase)| (0+32768)+1))
   843  01A8  0084               	movwf	4
   844  01A9  120A  118A  21B1  120A  118A  	fcall	stringdir
   845  01AE  0087               	movwf	7	;volatile
   846  01AF                     l883:	
   847                           
   848                           ;Multiplexar.c: 16:                 PORTDbits.RD1 = 1;
   849  01AF  1488               	bsf	8,1	;volatile
   850  01B0                     l95:	
   851  01B0  0008               	return
   852  01B1                     __end_of_initMultiplex:	
   853                           
   854                           	psect	text2
   855  0098                     __ptext2:	
   856 ;; *************** function _ISR *****************
   857 ;; Defined at:
   858 ;;		line 41 in file "ADC.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;		None
   861 ;; Auto vars:     Size  Location     Type
   862 ;;		None
   863 ;; Return value:  Size  Location     Type
   864 ;;                  1    wreg      void 
   865 ;; Registers used:
   866 ;;		wreg, status,2, status,0, pclath, cstack
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   872 ;;      Params:         0       0       0       0       0
   873 ;;      Locals:         0       0       0       0       0
   874 ;;      Temps:          0       4       0       0       0
   875 ;;      Totals:         0       4       0       0       0
   876 ;;Total ram usage:        4 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; Hardware stack levels required when called:    1
   879 ;; This function calls:
   880 ;;		___awdiv
   881 ;;		___wmul
   882 ;; This function is called by:
   883 ;;		Interrupt level 1
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           
   888                           ;psect for function _ISR
   889  0098                     _ISR:	
   890  0098                     i1l943:	
   891                           
   892                           ;ADC.c: 42:     INTCONbits.GIE = 0;
   893  0098  138B               	bcf	11,7	;volatile
   894                           
   895                           ;ADC.c: 43:     INTCONbits.RBIE = 0;
   896  0099  118B               	bcf	11,3	;volatile
   897                           
   898                           ;ADC.c: 44:     INTCONbits.T0IE = 0;
   899  009A  128B               	bcf	11,5	;volatile
   900                           
   901                           ;ADC.c: 45:     if(INTCONbits.T0IF == 1){
   902  009B  1D0B               	btfss	11,2	;volatile
   903  009C  289E               	goto	u39_21
   904  009D  289F               	goto	u39_20
   905  009E                     u39_21:	
   906  009E  28A3               	goto	i1l949
   907  009F                     u39_20:	
   908  009F                     i1l945:	
   909                           
   910                           ;ADC.c: 46:         TMR0 = 99;
   911  009F  3063               	movlw	99
   912  00A0  0081               	movwf	1	;volatile
   913  00A1                     i1l947:	
   914                           
   915                           ;ADC.c: 47:         change = 1;
   916  00A1  01B1               	clrf	_change
   917  00A2  0AB1               	incf	_change,f
   918  00A3                     i1l949:	
   919                           
   920                           ;ADC.c: 49:     if(INTCONbits.RBIF == 1 && PORTBbits.RB1 == 1){
   921  00A3  1C0B               	btfss	11,0	;volatile
   922  00A4  28A6               	goto	u40_21
   923  00A5  28A7               	goto	u40_20
   924  00A6                     u40_21:	
   925  00A6  28AF               	goto	i1l955
   926  00A7                     u40_20:	
   927  00A7                     i1l951:	
   928  00A7  1C86               	btfss	6,1	;volatile
   929  00A8  28AA               	goto	u41_21
   930  00A9  28AB               	goto	u41_20
   931  00AA                     u41_21:	
   932  00AA  28AF               	goto	i1l955
   933  00AB                     u41_20:	
   934  00AB                     i1l953:	
   935                           
   936                           ;ADC.c: 50:         contador1++;
   937  00AB  3001               	movlw	1
   938  00AC  00A4               	movwf	??_ISR
   939  00AD  0824               	movf	??_ISR,w
   940  00AE  07B0               	addwf	_contador1,f
   941  00AF                     i1l955:	
   942                           
   943                           ;ADC.c: 52:     if(INTCONbits.RBIF == 1 && PORTBbits.RB0 == 1){
   944  00AF  1C0B               	btfss	11,0	;volatile
   945  00B0  28B2               	goto	u42_21
   946  00B1  28B3               	goto	u42_20
   947  00B2                     u42_21:	
   948  00B2  28B9               	goto	i1l961
   949  00B3                     u42_20:	
   950  00B3                     i1l957:	
   951  00B3  1C06               	btfss	6,0	;volatile
   952  00B4  28B6               	goto	u43_21
   953  00B5  28B7               	goto	u43_20
   954  00B6                     u43_21:	
   955  00B6  28B9               	goto	i1l961
   956  00B7                     u43_20:	
   957  00B7                     i1l959:	
   958                           
   959                           ;ADC.c: 53:         contador1--;
   960  00B7  3001               	movlw	1
   961  00B8  02B0               	subwf	_contador1,f
   962  00B9                     i1l961:	
   963                           
   964                           ;ADC.c: 55:     if (PIR1bits.ADIF==1){
   965  00B9  1F0C               	btfss	12,6	;volatile
   966  00BA  28BC               	goto	u44_21
   967  00BB  28BD               	goto	u44_20
   968  00BC                     u44_21:	
   969  00BC  28F6               	goto	i1l965
   970  00BD                     u44_20:	
   971  00BD                     i1l963:	
   972                           
   973                           ;ADC.c: 56:         display1 = ADRESH * (0B00001111);
   974  00BD  081E               	movf	30,w	;volatile
   975  00BE  00A4               	movwf	??_ISR
   976  00BF  01A5               	clrf	??_ISR+1
   977  00C0  0824               	movf	??_ISR,w
   978  00C1  00F0               	movwf	___wmul@multiplier
   979  00C2  0825               	movf	??_ISR+1,w
   980  00C3  00F1               	movwf	___wmul@multiplier+1
   981  00C4  300F               	movlw	15
   982  00C5  00F2               	movwf	___wmul@multiplicand
   983  00C6  3000               	movlw	0
   984  00C7  00F3               	movwf	___wmul@multiplicand+1
   985  00C8  120A  118A  216C  120A  118A  	fcall	___wmul
   986  00CD  0871               	movf	?___wmul+1,w
   987  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   988  00CF  1303               	bcf	3,6	;RP1=0, select bank0
   989  00D0  00AF               	movwf	_display1+1
   990  00D1  0870               	movf	?___wmul,w
   991  00D2  00AE               	movwf	_display1
   992                           
   993                           ;ADC.c: 57:         display2 = ADRESH * (0B11110000) / 16;
   994  00D3  3010               	movlw	16
   995  00D4  00F6               	movwf	___awdiv@divisor
   996  00D5  3000               	movlw	0
   997  00D6  00F7               	movwf	___awdiv@divisor+1
   998  00D7  081E               	movf	30,w	;volatile
   999  00D8  00A4               	movwf	??_ISR
  1000  00D9  01A5               	clrf	??_ISR+1
  1001  00DA  0824               	movf	??_ISR,w
  1002  00DB  00F0               	movwf	___wmul@multiplier
  1003  00DC  0825               	movf	??_ISR+1,w
  1004  00DD  00F1               	movwf	___wmul@multiplier+1
  1005  00DE  30F0               	movlw	240
  1006  00DF  00F2               	movwf	___wmul@multiplicand
  1007  00E0  3000               	movlw	0
  1008  00E1  00F3               	movwf	___wmul@multiplicand+1
  1009  00E2  120A  118A  216C  120A  118A  	fcall	___wmul
  1010  00E7  0871               	movf	?___wmul+1,w
  1011  00E8  00F9               	movwf	___awdiv@dividend+1
  1012  00E9  0870               	movf	?___wmul,w
  1013  00EA  00F8               	movwf	___awdiv@dividend
  1014  00EB  120A  118A  2103  120A  118A  	fcall	___awdiv
  1015  00F0  0877               	movf	?___awdiv+1,w
  1016  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1017  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  1018  00F3  00AD               	movwf	_display2+1
  1019  00F4  0876               	movf	?___awdiv,w
  1020  00F5  00AC               	movwf	_display2
  1021  00F6                     i1l965:	
  1022                           
  1023                           ;ADC.c: 59:     INTCONbits.GIE = 1;
  1024  00F6  178B               	bsf	11,7	;volatile
  1025  00F7                     i1l967:	
  1026                           
  1027                           ;ADC.c: 60:     INTCONbits.RBIE = 1;
  1028  00F7  158B               	bsf	11,3	;volatile
  1029  00F8                     i1l969:	
  1030                           
  1031                           ;ADC.c: 61:     INTCONbits.RBIF = 0;
  1032  00F8  100B               	bcf	11,0	;volatile
  1033  00F9                     i1l971:	
  1034                           
  1035                           ;ADC.c: 62:     INTCONbits.T0IE = 1;
  1036  00F9  168B               	bsf	11,5	;volatile
  1037  00FA                     i1l973:	
  1038                           
  1039                           ;ADC.c: 63:     INTCONbits.T0IF = 0;
  1040  00FA  110B               	bcf	11,2	;volatile
  1041  00FB                     i1l975:	
  1042                           
  1043                           ;ADC.c: 64:     PIR1bits.ADIF=0;
  1044  00FB  130C               	bcf	12,6	;volatile
  1045  00FC                     i1l73:	
  1046  00FC  0827               	movf	??_ISR+3,w
  1047  00FD  008A               	movwf	10
  1048  00FE  0E26               	swapf	(??_ISR+2)^0,w
  1049  00FF  0083               	movwf	3
  1050  0100  0EFE               	swapf	btemp,f
  1051  0101  0E7E               	swapf	btemp,w
  1052  0102  0009               	retfie
  1053  0103                     __end_of_ISR:	
  1054                           
  1055                           	psect	intentry
  1056  0004                     __pintentry:	
  1057                           ;incstack = 0
  1058                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  1059                           
  1060  0004                     interrupt_function:	
  1061  007E                     saved_w	set	btemp
  1062  0004  00FE               	movwf	btemp
  1063  0005  0E03               	swapf	3,w
  1064  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1065  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1066  0008  00A6               	movwf	??_ISR+2
  1067  0009  080A               	movf	10,w
  1068  000A  00A7               	movwf	??_ISR+3
  1069  000B  120A  118A  2898   	ljmp	_ISR
  1070                           
  1071                           	psect	text3
  1072  016C                     __ptext3:	
  1073 ;; *************** function ___wmul *****************
  1074 ;; Defined at:
  1075 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;  multiplier      2    0[COMMON] unsigned int 
  1078 ;;  multiplicand    2    2[COMMON] unsigned int 
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;  product         2    4[COMMON] unsigned int 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  2    0[COMMON] unsigned int 
  1083 ;; Registers used:
  1084 ;;		wreg, status,2, status,0
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1090 ;;      Params:         4       0       0       0       0
  1091 ;;      Locals:         2       0       0       0       0
  1092 ;;      Temps:          0       0       0       0       0
  1093 ;;      Totals:         6       0       0       0       0
  1094 ;;Total ram usage:        6 bytes
  1095 ;; Hardware stack levels used:    1
  1096 ;; This function calls:
  1097 ;;		Nothing
  1098 ;; This function is called by:
  1099 ;;		_ISR
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           
  1104                           ;psect for function ___wmul
  1105  016C                     ___wmul:	
  1106  016C                     i1l885:	
  1107                           ;incstack = 0
  1108                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1109                           
  1110  016C  01F4               	clrf	___wmul@product
  1111  016D  01F5               	clrf	___wmul@product+1
  1112  016E                     i1l887:	
  1113  016E  1C70               	btfss	___wmul@multiplier,0
  1114  016F  2971               	goto	u25_21
  1115  0170  2972               	goto	u25_20
  1116  0171                     u25_21:	
  1117  0171  2978               	goto	i1l181
  1118  0172                     u25_20:	
  1119  0172                     i1l889:	
  1120  0172  0872               	movf	___wmul@multiplicand,w
  1121  0173  07F4               	addwf	___wmul@product,f
  1122  0174  1803               	skipnc
  1123  0175  0AF5               	incf	___wmul@product+1,f
  1124  0176  0873               	movf	___wmul@multiplicand+1,w
  1125  0177  07F5               	addwf	___wmul@product+1,f
  1126  0178                     i1l181:	
  1127  0178  3001               	movlw	1
  1128  0179                     u26_25:	
  1129  0179  1003               	clrc
  1130  017A  0DF2               	rlf	___wmul@multiplicand,f
  1131  017B  0DF3               	rlf	___wmul@multiplicand+1,f
  1132  017C  3EFF               	addlw	-1
  1133  017D  1D03               	skipz
  1134  017E  2979               	goto	u26_25
  1135  017F                     i1l891:	
  1136  017F  3001               	movlw	1
  1137  0180                     u27_25:	
  1138  0180  1003               	clrc
  1139  0181  0CF1               	rrf	___wmul@multiplier+1,f
  1140  0182  0CF0               	rrf	___wmul@multiplier,f
  1141  0183  3EFF               	addlw	-1
  1142  0184  1D03               	skipz
  1143  0185  2980               	goto	u27_25
  1144  0186                     i1l893:	
  1145  0186  0870               	movf	___wmul@multiplier,w
  1146  0187  0471               	iorwf	___wmul@multiplier+1,w
  1147  0188  1D03               	btfss	3,2
  1148  0189  298B               	goto	u28_21
  1149  018A  298C               	goto	u28_20
  1150  018B                     u28_21:	
  1151  018B  296E               	goto	i1l887
  1152  018C                     u28_20:	
  1153  018C                     i1l895:	
  1154  018C  0875               	movf	___wmul@product+1,w
  1155  018D  00F1               	movwf	?___wmul+1
  1156  018E  0874               	movf	___wmul@product,w
  1157  018F  00F0               	movwf	?___wmul
  1158  0190                     i1l183:	
  1159  0190  0008               	return
  1160  0191                     __end_of___wmul:	
  1161                           
  1162                           	psect	text4
  1163  0103                     __ptext4:	
  1164 ;; *************** function ___awdiv *****************
  1165 ;; Defined at:
  1166 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;  divisor         2    6[COMMON] int 
  1169 ;;  dividend        2    8[COMMON] int 
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  quotient        2    2[BANK0 ] int 
  1172 ;;  sign            1    1[BANK0 ] unsigned char 
  1173 ;;  counter         1    0[BANK0 ] unsigned char 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  2    6[COMMON] int 
  1176 ;; Registers used:
  1177 ;;		wreg, status,2, status,0
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1183 ;;      Params:         4       0       0       0       0
  1184 ;;      Locals:         0       4       0       0       0
  1185 ;;      Temps:          1       0       0       0       0
  1186 ;;      Totals:         5       4       0       0       0
  1187 ;;Total ram usage:        9 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; This function calls:
  1190 ;;		Nothing
  1191 ;; This function is called by:
  1192 ;;		_ISR
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           
  1197                           ;psect for function ___awdiv
  1198  0103                     ___awdiv:	
  1199  0103                     i1l899:	
  1200                           ;incstack = 0
  1201                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1202                           
  1203  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1204  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1205  0105  01A1               	clrf	___awdiv@sign
  1206  0106                     i1l901:	
  1207  0106  1FF7               	btfss	___awdiv@divisor+1,7
  1208  0107  2909               	goto	u29_21
  1209  0108  290A               	goto	u29_20
  1210  0109                     u29_21:	
  1211  0109  2911               	goto	i1l907
  1212  010A                     u29_20:	
  1213  010A                     i1l903:	
  1214  010A  09F6               	comf	___awdiv@divisor,f
  1215  010B  09F7               	comf	___awdiv@divisor+1,f
  1216  010C  0AF6               	incf	___awdiv@divisor,f
  1217  010D  1903               	skipnz
  1218  010E  0AF7               	incf	___awdiv@divisor+1,f
  1219  010F                     i1l905:	
  1220  010F  01A1               	clrf	___awdiv@sign
  1221  0110  0AA1               	incf	___awdiv@sign,f
  1222  0111                     i1l907:	
  1223  0111  1FF9               	btfss	___awdiv@dividend+1,7
  1224  0112  2914               	goto	u30_21
  1225  0113  2915               	goto	u30_20
  1226  0114                     u30_21:	
  1227  0114  291E               	goto	i1l913
  1228  0115                     u30_20:	
  1229  0115                     i1l909:	
  1230  0115  09F8               	comf	___awdiv@dividend,f
  1231  0116  09F9               	comf	___awdiv@dividend+1,f
  1232  0117  0AF8               	incf	___awdiv@dividend,f
  1233  0118  1903               	skipnz
  1234  0119  0AF9               	incf	___awdiv@dividend+1,f
  1235  011A                     i1l911:	
  1236  011A  3001               	movlw	1
  1237  011B  00FA               	movwf	??___awdiv
  1238  011C  087A               	movf	??___awdiv,w
  1239  011D  06A1               	xorwf	___awdiv@sign,f
  1240  011E                     i1l913:	
  1241  011E  01A2               	clrf	___awdiv@quotient
  1242  011F  01A3               	clrf	___awdiv@quotient+1
  1243  0120                     i1l915:	
  1244  0120  0876               	movf	___awdiv@divisor,w
  1245  0121  0477               	iorwf	___awdiv@divisor+1,w
  1246  0122  1903               	btfsc	3,2
  1247  0123  2925               	goto	u31_21
  1248  0124  2926               	goto	u31_20
  1249  0125                     u31_21:	
  1250  0125  295D               	goto	i1l935
  1251  0126                     u31_20:	
  1252  0126                     i1l917:	
  1253  0126  01A0               	clrf	___awdiv@counter
  1254  0127  0AA0               	incf	___awdiv@counter,f
  1255  0128  2934               	goto	i1l923
  1256  0129                     i1l919:	
  1257  0129  3001               	movlw	1
  1258  012A                     u32_25:	
  1259  012A  1003               	clrc
  1260  012B  0DF6               	rlf	___awdiv@divisor,f
  1261  012C  0DF7               	rlf	___awdiv@divisor+1,f
  1262  012D  3EFF               	addlw	-1
  1263  012E  1D03               	skipz
  1264  012F  292A               	goto	u32_25
  1265  0130                     i1l921:	
  1266  0130  3001               	movlw	1
  1267  0131  00FA               	movwf	??___awdiv
  1268  0132  087A               	movf	??___awdiv,w
  1269  0133  07A0               	addwf	___awdiv@counter,f
  1270  0134                     i1l923:	
  1271  0134  1FF7               	btfss	___awdiv@divisor+1,7
  1272  0135  2937               	goto	u33_21
  1273  0136  2938               	goto	u33_20
  1274  0137                     u33_21:	
  1275  0137  2929               	goto	i1l919
  1276  0138                     u33_20:	
  1277  0138                     i1l925:	
  1278  0138  3001               	movlw	1
  1279  0139                     u34_25:	
  1280  0139  1003               	clrc
  1281  013A  0DA2               	rlf	___awdiv@quotient,f
  1282  013B  0DA3               	rlf	___awdiv@quotient+1,f
  1283  013C  3EFF               	addlw	-1
  1284  013D  1D03               	skipz
  1285  013E  2939               	goto	u34_25
  1286  013F  0877               	movf	___awdiv@divisor+1,w
  1287  0140  0279               	subwf	___awdiv@dividend+1,w
  1288  0141  1D03               	skipz
  1289  0142  2945               	goto	u35_25
  1290  0143  0876               	movf	___awdiv@divisor,w
  1291  0144  0278               	subwf	___awdiv@dividend,w
  1292  0145                     u35_25:	
  1293  0145  1C03               	skipc
  1294  0146  2948               	goto	u35_21
  1295  0147  2949               	goto	u35_20
  1296  0148                     u35_21:	
  1297  0148  2950               	goto	i1l931
  1298  0149                     u35_20:	
  1299  0149                     i1l927:	
  1300  0149  0876               	movf	___awdiv@divisor,w
  1301  014A  02F8               	subwf	___awdiv@dividend,f
  1302  014B  0877               	movf	___awdiv@divisor+1,w
  1303  014C  1C03               	skipc
  1304  014D  03F9               	decf	___awdiv@dividend+1,f
  1305  014E  02F9               	subwf	___awdiv@dividend+1,f
  1306  014F                     i1l929:	
  1307  014F  1422               	bsf	___awdiv@quotient,0
  1308  0150                     i1l931:	
  1309  0150  3001               	movlw	1
  1310  0151                     u36_25:	
  1311  0151  1003               	clrc
  1312  0152  0CF7               	rrf	___awdiv@divisor+1,f
  1313  0153  0CF6               	rrf	___awdiv@divisor,f
  1314  0154  3EFF               	addlw	-1
  1315  0155  1D03               	skipz
  1316  0156  2951               	goto	u36_25
  1317  0157                     i1l933:	
  1318  0157  3001               	movlw	1
  1319  0158  02A0               	subwf	___awdiv@counter,f
  1320  0159  1D03               	btfss	3,2
  1321  015A  295C               	goto	u37_21
  1322  015B  295D               	goto	u37_20
  1323  015C                     u37_21:	
  1324  015C  2938               	goto	i1l925
  1325  015D                     u37_20:	
  1326  015D                     i1l935:	
  1327  015D  0821               	movf	___awdiv@sign,w
  1328  015E  1903               	btfsc	3,2
  1329  015F  2961               	goto	u38_21
  1330  0160  2962               	goto	u38_20
  1331  0161                     u38_21:	
  1332  0161  2967               	goto	i1l939
  1333  0162                     u38_20:	
  1334  0162                     i1l937:	
  1335  0162  09A2               	comf	___awdiv@quotient,f
  1336  0163  09A3               	comf	___awdiv@quotient+1,f
  1337  0164  0AA2               	incf	___awdiv@quotient,f
  1338  0165  1903               	skipnz
  1339  0166  0AA3               	incf	___awdiv@quotient+1,f
  1340  0167                     i1l939:	
  1341  0167  0823               	movf	___awdiv@quotient+1,w
  1342  0168  00F7               	movwf	?___awdiv+1
  1343  0169  0822               	movf	___awdiv@quotient,w
  1344  016A  00F6               	movwf	?___awdiv
  1345  016B                     i1l334:	
  1346  016B  0008               	return
  1347  016C                     __end_of___awdiv:	
  1348  007E                     btemp	set	126	;btemp
  1349  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80     12      18
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_initMultiplex

Critical Paths under _ISR in BANK0

    _ISR->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     196
                                             10 BANK0      2     2      0
                      _initMultiplex
 ---------------------------------------------------------------------------------
 (1) _initMultiplex                                        2     0      2     196
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0     848
                                              4 BANK0      4     4      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     452
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initMultiplex

 _ISR (ROOT)
   ___awdiv
     ___wmul (ARG)
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C      12       5       22.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1F      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Feb 03 12:50:35 2020

                               pc 0002                       __CFG_CP$OFF 0000                                l93 01A4  
                              l95 01B0                      ___awdiv@sign 0021                                fsr 0004  
             ___wmul@multiplicand 0072                               l881 01A6                               l873 0191  
                             l883 01AF                               l875 0197                               l877 0199  
                             l981 0024                               l879 01A2                               l991 002F  
                             l983 002A                               l993 0030                               l985 002C  
                             l977 001F                               l995 0031                               l987 002D  
                             l979 0023                               l997 0032                               l989 002E  
                             l999 0035                               u240 0197                               u241 0196  
                             u450 0078                      __CFG_CPD$OFF 0000                               u451 0077  
                             u460 007C                               _ISR 0098                               u461 007B  
                             u477 0060                               u487 006D                               fsr0 0004  
                    __CFG_LVP$OFF 0000                              ?_ISR 0070                              l1001 0036  
                            l1011 0043                              l1003 003D                              l1021 004B  
                            l1013 0047                              l1005 003E                              l1031 0052  
                            l1023 004C                              l1015 0048                              l1007 003F  
                            l1041 0059                              l1033 0055                              l1025 004D  
                            l1017 0049                              l1009 0040                              l1051 007C  
                            l1043 005A                              l1035 0056                              l1027 0050  
                            l1019 004A                              l1053 0086                              l1045 0064  
                            l1037 0057                              l1029 0051                              l1055 008F  
                            l1047 0067                              l1039 0058                              l1049 0078  
                            l1057 0092                              _IOCB 0096                              i1l73 00FC  
                            _TMR0 0001                      __CFG_WRT$OFF 0000                              _main 001F  
                            btemp 007E                              start 000E                     __CFG_IESO$OFF 0000  
                           ??_ISR 0024  __end_ofinitMultiplex@SEGMENT_MAP 01C7                             ?_main 0070  
                 __end_of___awdiv 016C                     __CFG_WDTE$OFF 0000                             _ANSEL 0188  
                 ___awdiv@divisor 0076                             i1l181 0178                             i1l334 016B  
                           i1l183 0190                             i1l901 0106                             i1l911 011A  
                           i1l903 010A                             i1l921 0130                             i1l913 011E  
                           i1l905 010F                             i1l931 0150                             i1l923 0134  
                           i1l915 0120                             i1l907 0111                             i1l933 0157  
                           i1l925 0138                             i1l917 0126                             i1l909 0115  
                           i1l927 0149                             i1l919 0129                             i1l935 015D  
                           i1l951 00A7                             i1l943 0098                             i1l937 0162  
                           i1l929 014F                             i1l961 00B9                             i1l953 00AB  
                           i1l945 009F                             i1l939 0167                             i1l891 017F  
                           i1l971 00F9                             i1l963 00BD                             i1l955 00AF  
                           i1l947 00A1                             i1l893 0186                             i1l885 016C  
                           i1l973 00FA                             i1l965 00F6                             i1l957 00B3  
                           i1l949 00A3                             i1l895 018C                             i1l887 016E  
                           i1l975 00FB                             i1l967 00F7                             i1l959 00B7  
                           i1l889 0172                             i1l969 00F8                             i1l899 0103  
                 ___awdiv@counter 0020                             u30_20 0115                             u30_21 0114  
                           u31_20 0126                             u31_21 0125                             u40_20 00A7  
                           u40_21 00A6                             u32_25 012A                             u33_20 0138  
                           u25_20 0172                             u41_20 00AB                             u33_21 0137  
                           u25_21 0171                             u41_21 00AA                             u42_20 00B3  
                           u42_21 00B2                             u34_25 0139                             u26_25 0179  
                           u35_20 0149                             u43_20 00B7                             u35_21 0148  
                           u43_21 00B6                             _PORTA 0005                             _PORTB 0006  
                           _PORTC 0007                             _PORTD 0008                             u35_25 0145  
                           u27_25 0180                             u28_20 018C                             u44_20 00BD  
                           u28_21 018B                             u44_21 00BC                             u36_25 0151  
                           u37_20 015D                             u29_20 010A                             u37_21 015C  
                           u29_21 0109                             u38_20 0162                             u38_21 0161  
                           u39_20 009F                             u39_21 009E                             _TRISA 0085  
                           _TRISB 0086                             _TRISC 0087                             _TRISD 0088  
                  __CFG_FCMEN$OFF 0000                    __CFG_BOREN$OFF 0000                             pclath 000A  
                           status 0003                             wtemp0 007E                    __CFG_MCLRE$OFF 0000  
                 __initialization 0011                      __end_of_main 0098                            ??_main 002A  
          __size_of_initMultiplex 0020                            _ADRESH 001E                  ___awdiv@dividend 0078  
                          _ANSELH 0189                            _INTCON 000B                    __CFG_PWRTE$OFF 0000  
                          ___wmul 016C                         ??___awdiv 007A                            _change 0031  
                ___awdiv@quotient 0022                            saved_w 007E           __end_of__initialization 001B  
                   _initMultiplex 0191                    __pcstackCOMMON 0070                    _OPTION_REGbits 0081  
                      __pbssBANK0 002C                    ?_initMultiplex 0028                        __pmaintext 001F  
                         ?___wmul 0070                        __pintentry 0004                        __stringtab 01B1  
                         ___awdiv 0103                   __size_of___wmul 0025                           __ptext1 0191  
                         __ptext2 0098                           __ptext3 016C                           __ptext4 0103  
                    __size_of_ISR 006B                           _numero_ 007B              end_of_initialization 001B  
                 ??_initMultiplex 002A                         _PORTBbits 0006                         _PORTDbits 0008  
              initMultiplex@valor 0028                         _TRISBbits 0086                    __end_of___wmul 0191  
             start_initialization 0011                       __end_of_ISR 0103          __CFG_FOSC$INTRC_NOCLKOUT 0000  
                        ??___wmul 0074                       __pbssCOMMON 007B                         ___latbits 0002  
                   __pcstackBANK0 0020          initMultiplex@SEGMENT_MAP 01B7                          ?___awdiv 0076  
                       __pstrings 01B1                         _contador1 0030                 interrupt_function 0004  
                  ___wmul@product 0074                          _IOCBbits 0096                          _PIE1bits 008C  
                        _PIR1bits 000C                        _ADCON0bits 001F                       __stringbase 01B6  
                      _ADCON1bits 009F                 ___wmul@multiplier 0070             __end_of_initMultiplex 01B1  
                __size_of___awdiv 0069                __end_of__stringtab 01B7                 __CFG_BOR4V$BOR40V 0000  
                        _display1 002E                          _display2 002C                     __size_of_main 0079  
                      _INTCONbits 000B                          intlevel1 0000                         stringcode 01B1  
                      _OPTION_REG 0081                          stringdir 01B1                          stringtab 01B1  
