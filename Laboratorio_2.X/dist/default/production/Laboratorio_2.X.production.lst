

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Feb 03 12:57:32 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.10
    15                           ; Generated 31/07/2019 GMT
    16                           ; 
    17                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  008F                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  0105                     	;# 
   190  0107                     	;# 
   191  0108                     	;# 
   192  0109                     	;# 
   193  010C                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  0185                     	;# 
   199  0187                     	;# 
   200  0188                     	;# 
   201  0189                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0014                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  001D                     	;# 
   237  001E                     	;# 
   238  001F                     	;# 
   239  0081                     	;# 
   240  0085                     	;# 
   241  0086                     	;# 
   242  0087                     	;# 
   243  0088                     	;# 
   244  0089                     	;# 
   245  008C                     	;# 
   246  008D                     	;# 
   247  008E                     	;# 
   248  008F                     	;# 
   249  0090                     	;# 
   250  0091                     	;# 
   251  0092                     	;# 
   252  0093                     	;# 
   253  0093                     	;# 
   254  0093                     	;# 
   255  0094                     	;# 
   256  0095                     	;# 
   257  0096                     	;# 
   258  0097                     	;# 
   259  0098                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009C                     	;# 
   264  009D                     	;# 
   265  009E                     	;# 
   266  009F                     	;# 
   267  0105                     	;# 
   268  0107                     	;# 
   269  0108                     	;# 
   270  0109                     	;# 
   271  010C                     	;# 
   272  010C                     	;# 
   273  010D                     	;# 
   274  010E                     	;# 
   275  010F                     	;# 
   276  0185                     	;# 
   277  0187                     	;# 
   278  0188                     	;# 
   279  0189                     	;# 
   280  018C                     	;# 
   281  018D                     	;# 
   282                           
   283                           	psect	strings
   284  00A7                     __pstrings:	
   285  00A7                     stringtab:	
   286  00A7                     __stringtab:	
   287  00A7                     stringcode:	
   288                           ;	String table - string pointers are 1 byte each
   289                           
   290  00A7                     stringdir:	
   291  00A7  3000               	movlw	high stringdir
   292  00A8  008A               	movwf	10
   293  00A9  0804               	movf	4,w
   294  00AA  0A84               	incf	4,f
   295  00AB  0782               	addwf	2,f
   296  00AC                     __stringbase:	
   297  00AC  3400               	retlw	0
   298  00AD                     __end_of__stringtab:	
   299  00AD                     initMultiplex@SEGMENT_MAP:	
   300  00AD  343F               	retlw	63
   301  00AE  3406               	retlw	6
   302  00AF  345B               	retlw	91
   303  00B0  344F               	retlw	79
   304  00B1  3466               	retlw	102
   305  00B2  346D               	retlw	109
   306  00B3  347D               	retlw	125
   307  00B4  3407               	retlw	7
   308  00B5  347F               	retlw	127
   309  00B6  346F               	retlw	111
   310  00B7  3477               	retlw	119
   311  00B8  347C               	retlw	124
   312  00B9  3439               	retlw	57
   313  00BA  345E               	retlw	94
   314  00BB  3479               	retlw	121
   315  00BC  3471               	retlw	113
   316  00BD                     __end_ofinitMultiplex@SEGMENT_MAP:	
   317  0008                     _PORTDbits	set	8
   318  0008                     _PORTD	set	8
   319  0007                     _PORTC	set	7
   320  0006                     _PORTB	set	6
   321  0005                     _PORTA	set	5
   322  000B                     _INTCON	set	11
   323  0006                     _PORTBbits	set	6
   324  0001                     _TMR0	set	1
   325  000B                     _INTCONbits	set	11
   326  0096                     _IOCBbits	set	150
   327  0096                     _IOCB	set	150
   328  0081                     _OPTION_REGbits	set	129
   329  0081                     _OPTION_REG	set	129
   330  0088                     _TRISD	set	136
   331  0087                     _TRISC	set	135
   332  0086                     _TRISBbits	set	134
   333  0086                     _TRISB	set	134
   334  0085                     _TRISA	set	133
   335  0189                     _ANSELH	set	393
   336  0188                     _ANSEL	set	392
   337                           
   338                           ; #config settings
   339  0000                     
   340                           	psect	cinit
   341  000F                     start_initialization:	
   342  000F                     __initialization:	
   343                           
   344                           ; Clear objects allocated to COMMON
   345  000F  01F5               	clrf	__pbssCOMMON& (0+127)
   346  0010  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   347  0011  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   348  0012  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   349  0013                     end_of_initialization:	
   350                           ;End of C runtime variable initialization code
   351                           
   352  0013                     __end_of__initialization:	
   353  0013  0183               	clrf	3
   354  0014  120A  118A  2817   	ljmp	_main	;jump to C main() function
   355                           
   356                           	psect	bssCOMMON
   357  0075                     __pbssCOMMON:	
   358  0075                     _numero_:	
   359  0075                     	ds	2
   360  0077                     _contador1:	
   361  0077                     	ds	1
   362  0078                     _change:	
   363  0078                     	ds	1
   364                           
   365                           	psect	cstackCOMMON
   366  0070                     __pcstackCOMMON:	
   367  0070                     ?_ISR:	
   368  0070                     ??_ISR:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_main:	
   372                           ; 1 bytes @ 0x0
   373                           
   374                           
   375                           ; 1 bytes @ 0x0
   376  0070                     	ds	3
   377  0073                     ?_initMultiplex:	
   378  0073                     initMultiplex@valor:	
   379                           ; 1 bytes @ 0x3
   380                           
   381                           
   382                           ; 2 bytes @ 0x3
   383  0073                     	ds	2
   384  0075                     ??_initMultiplex:	
   385  0075                     ??_main:	
   386                           ; 1 bytes @ 0x5
   387                           
   388                           
   389                           	psect	maintext
   390  0017                     __pmaintext:	
   391                           ; 1 bytes @ 0x5
   392 ;;
   393 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   394 ;;
   395 ;; *************** function _main *****************
   396 ;; Defined at:
   397 ;;		line 61 in file "ADC.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;		None
   400 ;; Auto vars:     Size  Location     Type
   401 ;;		None
   402 ;; Return value:  Size  Location     Type
   403 ;;                  1    wreg      void 
   404 ;; Registers used:
   405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   406 ;; Tracked objects:
   407 ;;		On entry : B00/0
   408 ;;		On exit  : 0/0
   409 ;;		Unchanged: 0/0
   410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   411 ;;      Params:         0       0       0       0       0
   412 ;;      Locals:         0       0       0       0       0
   413 ;;      Temps:          0       0       0       0       0
   414 ;;      Totals:         0       0       0       0       0
   415 ;;Total ram usage:        0 bytes
   416 ;; Hardware stack levels required when called:    3
   417 ;; This function calls:
   418 ;;		_initMultiplex
   419 ;; This function is called by:
   420 ;;		Startup code after reset
   421 ;; This function uses a non-reentrant model
   422 ;;
   423                           
   424                           
   425                           ;psect for function _main
   426  0017                     _main:	
   427  0017                     l766:	
   428                           ;incstack = 0
   429                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   430                           
   431                           
   432                           ;ADC.c: 62:     TRISA = 0;
   433  0017  1683               	bsf	3,5	;RP0=1, select bank1
   434  0018  1303               	bcf	3,6	;RP1=0, select bank1
   435  0019  0185               	clrf	5	;volatile
   436                           
   437                           ;ADC.c: 63:     TRISB = 0;
   438  001A  0186               	clrf	6	;volatile
   439  001B                     l768:	
   440                           
   441                           ;ADC.c: 64:     TRISBbits.TRISB0 = 1;
   442  001B  1406               	bsf	6,0	;volatile
   443  001C                     l770:	
   444                           
   445                           ;ADC.c: 65:     TRISBbits.TRISB1 = 1;
   446  001C  1486               	bsf	6,1	;volatile
   447                           
   448                           ;ADC.c: 66:     TRISC = 0;
   449  001D  0187               	clrf	7	;volatile
   450                           
   451                           ;ADC.c: 67:     TRISD = 0;
   452  001E  0188               	clrf	8	;volatile
   453                           
   454                           ;ADC.c: 69:     ANSEL = 0;
   455  001F  1683               	bsf	3,5	;RP0=1, select bank3
   456  0020  1703               	bsf	3,6	;RP1=1, select bank3
   457  0021  0188               	clrf	8	;volatile
   458                           
   459                           ;ADC.c: 70:     ANSELH = 0;
   460  0022  0189               	clrf	9	;volatile
   461                           
   462                           ;ADC.c: 72:     INTCON = 0;
   463  0023  018B               	clrf	11	;volatile
   464  0024                     l772:	
   465                           
   466                           ;ADC.c: 73:     INTCONbits.GIE = 1;
   467  0024  178B               	bsf	11,7	;volatile
   468  0025                     l774:	
   469                           
   470                           ;ADC.c: 74:     INTCONbits.RBIE = 1;
   471  0025  158B               	bsf	11,3	;volatile
   472  0026                     l776:	
   473                           
   474                           ;ADC.c: 75:     INTCONbits.RBIF = 0;
   475  0026  100B               	bcf	11,0	;volatile
   476  0027                     l778:	
   477                           
   478                           ;ADC.c: 76:     INTCONbits.T0IE = 1;
   479  0027  168B               	bsf	11,5	;volatile
   480  0028                     l780:	
   481                           
   482                           ;ADC.c: 77:     INTCONbits.T0IF = 0;
   483  0028  110B               	bcf	11,2	;volatile
   484                           
   485                           ;ADC.c: 79:     OPTION_REG = 0;
   486  0029  1683               	bsf	3,5	;RP0=1, select bank1
   487  002A  1303               	bcf	3,6	;RP1=0, select bank1
   488  002B  0181               	clrf	1	;volatile
   489  002C                     l782:	
   490                           
   491                           ;ADC.c: 80:     OPTION_REGbits.PS2 = 1;
   492  002C  1501               	bsf	1,2	;volatile
   493  002D                     l784:	
   494                           
   495                           ;ADC.c: 82:     TMR0 = 99;
   496  002D  3063               	movlw	99
   497  002E  1283               	bcf	3,5	;RP0=0, select bank0
   498  002F  1303               	bcf	3,6	;RP1=0, select bank0
   499  0030  0081               	movwf	1	;volatile
   500  0031                     l786:	
   501                           
   502                           ;ADC.c: 84:     IOCB = 0;
   503  0031  1683               	bsf	3,5	;RP0=1, select bank1
   504  0032  1303               	bcf	3,6	;RP1=0, select bank1
   505  0033  0196               	clrf	22	;volatile
   506  0034                     l788:	
   507                           
   508                           ;ADC.c: 85:     IOCBbits.IOCB0 = 1;
   509  0034  1416               	bsf	22,0	;volatile
   510  0035                     l790:	
   511                           
   512                           ;ADC.c: 86:     IOCBbits.IOCB1 = 1;
   513  0035  1496               	bsf	22,1	;volatile
   514  0036                     l792:	
   515                           
   516                           ;ADC.c: 88:     PORTA = 0;
   517  0036  1283               	bcf	3,5	;RP0=0, select bank0
   518  0037  1303               	bcf	3,6	;RP1=0, select bank0
   519  0038  0185               	clrf	5	;volatile
   520  0039                     l794:	
   521                           
   522                           ;ADC.c: 89:     PORTB = 0;
   523  0039  0186               	clrf	6	;volatile
   524  003A                     l796:	
   525                           
   526                           ;ADC.c: 90:     PORTC = 0;
   527  003A  0187               	clrf	7	;volatile
   528  003B                     l798:	
   529                           
   530                           ;ADC.c: 91:     PORTD = 0;
   531  003B  0188               	clrf	8	;volatile
   532  003C                     l800:	
   533                           
   534                           ;ADC.c: 92:     PORTDbits.RD1 = 1;
   535  003C  1488               	bsf	8,1	;volatile
   536  003D                     l802:	
   537                           
   538                           ;ADC.c: 94:     contador1 = 0;
   539  003D  01F7               	clrf	_contador1
   540  003E                     l804:	
   541                           
   542                           ;ADC.c: 97:         if(change == 1){
   543  003E  0378               	decf	_change,w
   544  003F  1D03               	btfss	3,2
   545  0040  2842               	goto	u91
   546  0041  2843               	goto	u90
   547  0042                     u91:	
   548  0042  284C               	goto	l810
   549  0043                     u90:	
   550  0043                     l806:	
   551                           
   552                           ;ADC.c: 98:             initMultiplex(numero_);
   553  0043  3000               	movlw	0
   554  0044  00F3               	movwf	initMultiplex@valor
   555  0045  00F4               	movwf	initMultiplex@valor+1
   556  0046  120A  118A  2087  120A  118A  	fcall	_initMultiplex
   557  004B                     l808:	
   558                           
   559                           ;ADC.c: 99:             change = 0;
   560  004B  01F8               	clrf	_change
   561  004C                     l810:	
   562                           
   563                           ;ADC.c: 101:         PORTA = contador1;
   564  004C  0877               	movf	_contador1,w
   565  004D  1283               	bcf	3,5	;RP0=0, select bank0
   566  004E  1303               	bcf	3,6	;RP1=0, select bank0
   567  004F  0085               	movwf	5	;volatile
   568  0050  283E               	goto	l804
   569  0051  120A  118A  280C   	ljmp	start
   570  0054                     __end_of_main:	
   571                           
   572                           	psect	text1
   573  0087                     __ptext1:	
   574 ;; *************** function _initMultiplex *****************
   575 ;; Defined at:
   576 ;;		line 5 in file "Multiplexar.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;  valor           2    3[COMMON] unsigned int 
   579 ;; Auto vars:     Size  Location     Type
   580 ;;		None
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   590 ;;      Params:         2       0       0       0       0
   591 ;;      Locals:         0       0       0       0       0
   592 ;;      Temps:          0       0       0       0       0
   593 ;;      Totals:         2       0       0       0       0
   594 ;;Total ram usage:        2 bytes
   595 ;; Hardware stack levels used:    2
   596 ;; Hardware stack levels required when called:    1
   597 ;; This function calls:
   598 ;;		Nothing
   599 ;; This function is called by:
   600 ;;		_main
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           
   605                           ;psect for function _initMultiplex
   606  0087                     _initMultiplex:	
   607  0087                     l754:	
   608                           ;incstack = 0
   609                           ; Regs used in _initMultiplex: [wreg-fsr0h+status,2+status,0+pclath]
   610                           
   611                           
   612                           ;Multiplexar.c: 6:     unsigned char const SEGMENT_MAP[16] = {0x3F, 0x06, 0x5B, 0x4F, 0x
      +                          66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0X39, 0X5E, 0X79, 0X71};;Multiplexar.c: 7:
      +                                       if(PORTDbits.RD1 == 1){
   613  0087  1283               	bcf	3,5	;RP0=0, select bank0
   614  0088  1303               	bcf	3,6	;RP1=0, select bank0
   615  0089  1C88               	btfss	8,1	;volatile
   616  008A  288C               	goto	u81
   617  008B  288D               	goto	u80
   618  008C                     u81:	
   619  008C  289A               	goto	l74
   620  008D                     u80:	
   621  008D                     l756:	
   622                           
   623                           ;Multiplexar.c: 8:                 PORTDbits.RD1 = 0;
   624  008D  1088               	bcf	8,1	;volatile
   625                           
   626                           ;Multiplexar.c: 9:                 PORTDbits.RD0 = 0;
   627  008E  1008               	bcf	8,0	;volatile
   628  008F                     l758:	
   629                           
   630                           ;Multiplexar.c: 10:                 PORTC = SEGMENT_MAP[valor];
   631  008F  0873               	movf	initMultiplex@valor,w
   632  0090  3E01               	addlw	low ((initMultiplex@SEGMENT_MAP-__stringbase)| (0+32768))
   633  0091  0084               	movwf	4
   634  0092  120A  118A  20A7  120A  118A  	fcall	stringdir
   635  0097  0087               	movwf	7	;volatile
   636  0098                     l760:	
   637                           
   638                           ;Multiplexar.c: 11:                 PORTDbits.RD0 = 1;
   639  0098  1408               	bsf	8,0	;volatile
   640                           
   641                           ;Multiplexar.c: 12:             }else {
   642  0099  28A6               	goto	l76
   643  009A                     l74:	
   644                           
   645                           ;Multiplexar.c: 13:                 PORTDbits.RD0 = 0;
   646  009A  1008               	bcf	8,0	;volatile
   647                           
   648                           ;Multiplexar.c: 14:                 PORTDbits.RD1 = 0;
   649  009B  1088               	bcf	8,1	;volatile
   650  009C                     l762:	
   651                           
   652                           ;Multiplexar.c: 15:                 PORTC = SEGMENT_MAP[valor+1];
   653  009C  0873               	movf	initMultiplex@valor,w
   654  009D  3E02               	addlw	low (((initMultiplex@SEGMENT_MAP-__stringbase)| (0+32768)+1))
   655  009E  0084               	movwf	4
   656  009F  120A  118A  20A7  120A  118A  	fcall	stringdir
   657  00A4  0087               	movwf	7	;volatile
   658  00A5                     l764:	
   659                           
   660                           ;Multiplexar.c: 16:                 PORTDbits.RD1 = 1;
   661  00A5  1488               	bsf	8,1	;volatile
   662  00A6                     l76:	
   663  00A6  0008               	return
   664  00A7                     __end_of_initMultiplex:	
   665                           
   666                           	psect	text2
   667  0054                     __ptext2:	
   668 ;; *************** function _ISR *****************
   669 ;; Defined at:
   670 ;;		line 40 in file "ADC.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;		None
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg, status,2, status,0
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   684 ;;      Params:         0       0       0       0       0
   685 ;;      Locals:         0       0       0       0       0
   686 ;;      Temps:          3       0       0       0       0
   687 ;;      Totals:         3       0       0       0       0
   688 ;;Total ram usage:        3 bytes
   689 ;; Hardware stack levels used:    1
   690 ;; This function calls:
   691 ;;		Nothing
   692 ;; This function is called by:
   693 ;;		Interrupt level 1
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           
   698                           ;psect for function _ISR
   699  0054                     _ISR:	
   700  0054                     i1l680:	
   701                           
   702                           ;ADC.c: 41:     INTCONbits.GIE = 0;
   703  0054  138B               	bcf	11,7	;volatile
   704                           
   705                           ;ADC.c: 42:     INTCONbits.RBIE = 0;
   706  0055  118B               	bcf	11,3	;volatile
   707                           
   708                           ;ADC.c: 43:     INTCONbits.T0IE = 0;
   709  0056  128B               	bcf	11,5	;volatile
   710                           
   711                           ;ADC.c: 44:     if(INTCONbits.T0IF == 1){
   712  0057  1D0B               	btfss	11,2	;volatile
   713  0058  285A               	goto	u2_21
   714  0059  285B               	goto	u2_20
   715  005A                     u2_21:	
   716  005A  2861               	goto	i1l686
   717  005B                     u2_20:	
   718  005B                     i1l682:	
   719                           
   720                           ;ADC.c: 45:         TMR0 = 99;
   721  005B  3063               	movlw	99
   722  005C  1283               	bcf	3,5	;RP0=0, select bank0
   723  005D  1303               	bcf	3,6	;RP1=0, select bank0
   724  005E  0081               	movwf	1	;volatile
   725  005F                     i1l684:	
   726                           
   727                           ;ADC.c: 46:         change = 1;
   728  005F  01F8               	clrf	_change
   729  0060  0AF8               	incf	_change,f
   730  0061                     i1l686:	
   731                           
   732                           ;ADC.c: 48:     if(INTCONbits.RBIF == 1 && PORTBbits.RB1 == 1){
   733  0061  1C0B               	btfss	11,0	;volatile
   734  0062  2864               	goto	u3_21
   735  0063  2865               	goto	u3_20
   736  0064                     u3_21:	
   737  0064  286F               	goto	i1l692
   738  0065                     u3_20:	
   739  0065                     i1l688:	
   740  0065  1283               	bcf	3,5	;RP0=0, select bank0
   741  0066  1303               	bcf	3,6	;RP1=0, select bank0
   742  0067  1C86               	btfss	6,1	;volatile
   743  0068  286A               	goto	u4_21
   744  0069  286B               	goto	u4_20
   745  006A                     u4_21:	
   746  006A  286F               	goto	i1l692
   747  006B                     u4_20:	
   748  006B                     i1l690:	
   749                           
   750                           ;ADC.c: 49:         contador1++;
   751  006B  3001               	movlw	1
   752  006C  00F0               	movwf	??_ISR
   753  006D  0870               	movf	??_ISR,w
   754  006E  07F7               	addwf	_contador1,f
   755  006F                     i1l692:	
   756                           
   757                           ;ADC.c: 51:     if(INTCONbits.RBIF == 1 && PORTBbits.RB0 == 1){
   758  006F  1C0B               	btfss	11,0	;volatile
   759  0070  2872               	goto	u5_21
   760  0071  2873               	goto	u5_20
   761  0072                     u5_21:	
   762  0072  287B               	goto	i1l698
   763  0073                     u5_20:	
   764  0073                     i1l694:	
   765  0073  1283               	bcf	3,5	;RP0=0, select bank0
   766  0074  1303               	bcf	3,6	;RP1=0, select bank0
   767  0075  1C06               	btfss	6,0	;volatile
   768  0076  2878               	goto	u6_21
   769  0077  2879               	goto	u6_20
   770  0078                     u6_21:	
   771  0078  287B               	goto	i1l698
   772  0079                     u6_20:	
   773  0079                     i1l696:	
   774                           
   775                           ;ADC.c: 52:         contador1--;
   776  0079  3001               	movlw	1
   777  007A  02F7               	subwf	_contador1,f
   778  007B                     i1l698:	
   779                           
   780                           ;ADC.c: 54:     INTCONbits.GIE = 1;
   781  007B  178B               	bsf	11,7	;volatile
   782  007C                     i1l700:	
   783                           
   784                           ;ADC.c: 55:     INTCONbits.RBIE = 1;
   785  007C  158B               	bsf	11,3	;volatile
   786  007D                     i1l702:	
   787                           
   788                           ;ADC.c: 56:     INTCONbits.RBIF = 0;
   789  007D  100B               	bcf	11,0	;volatile
   790  007E                     i1l704:	
   791                           
   792                           ;ADC.c: 57:     INTCONbits.T0IE = 1;
   793  007E  168B               	bsf	11,5	;volatile
   794  007F                     i1l706:	
   795                           
   796                           ;ADC.c: 58:     INTCONbits.T0IF = 0;
   797  007F  110B               	bcf	11,2	;volatile
   798  0080                     i1l56:	
   799  0080  0872               	movf	??_ISR+2,w
   800  0081  008A               	movwf	10
   801  0082  0E71               	swapf	(??_ISR+1)^(0+4294967168),w
   802  0083  0083               	movwf	3
   803  0084  0EFE               	swapf	btemp,f
   804  0085  0E7E               	swapf	btemp,w
   805  0086  0009               	retfie
   806  0087                     __end_of_ISR:	
   807  007E                     btemp	set	126	;btemp
   808  007E                     wtemp0	set	126
   809                           
   810                           	psect	intentry
   811  0004                     __pintentry:	
   812                           ;incstack = 0
   813                           ; Regs used in _ISR: [wreg+status,2+status,0]
   814                           
   815  0004                     interrupt_function:	
   816  007E                     saved_w	set	btemp
   817  0004  00FE               	movwf	btemp
   818  0005  0E03               	swapf	3,w
   819  0006  00F1               	movwf	??_ISR+1
   820  0007  080A               	movf	10,w
   821  0008  00F2               	movwf	??_ISR+2
   822  0009  120A  118A  2854   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_initMultiplex

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     120
                      _initMultiplex
 ---------------------------------------------------------------------------------
 (2) _initMultiplex                                        2     0      2     120
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initMultiplex

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       9       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       9      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Feb 03 12:57:32 2020

                               pc 0002                       __CFG_CP$OFF 0000                                l74 009A  
                              l76 00A6                                u80 008D                                u81 008C  
                              u90 0043                                u91 0042                                fsr 0004  
                             l800 003C                               l810 004C                               l802 003D  
                             l804 003E                               l806 0043                               l760 0098  
                             l808 004B                               l762 009C                               l754 0087  
                             l770 001C                               l764 00A5                               l756 008D  
                             l780 0028                               l772 0024                               l758 008F  
                             l790 0035                               l782 002C                               l774 0025  
                             l766 0017                               l792 0036                               l784 002D  
                             l776 0026                               l768 001B                               l794 0039  
                             l786 0031                               l778 0027                               l796 003A  
                             l788 0034                               l798 003B                      __CFG_CPD$OFF 0000  
                             _ISR 0054                               fsr0 0004                      __CFG_LVP$OFF 0000  
                            ?_ISR 0070                              _IOCB 0096                              i1l56 0080  
                            _TMR0 0001                              u2_20 005B                              u2_21 005A  
                            u3_20 0065                              u3_21 0064                              u4_20 006B  
                            u4_21 006A                              u5_20 0073                              u5_21 0072  
                            u6_20 0079                              u6_21 0078                      __CFG_WRT$OFF 0000  
                            _main 0017                              btemp 007E                              start 000C  
                   __CFG_IESO$OFF 0000                             ??_ISR 0070  __end_ofinitMultiplex@SEGMENT_MAP 00BD  
                           ?_main 0070                     __CFG_WDTE$OFF 0000                             _ANSEL 0188  
                           i1l700 007C                             i1l702 007D                             i1l704 007E  
                           i1l706 007F                             i1l680 0054                             i1l690 006B  
                           i1l682 005B                             i1l692 006F                             i1l684 005F  
                           i1l694 0073                             i1l686 0061                             i1l696 0079  
                           i1l688 0065                             i1l698 007B                             _PORTA 0005  
                           _PORTB 0006                             _PORTC 0007                             _PORTD 0008  
                           _TRISA 0085                             _TRISB 0086                             _TRISC 0087  
                           _TRISD 0088                    __CFG_FCMEN$OFF 0000                    __CFG_BOREN$OFF 0000  
                           pclath 000A                             status 0003                             wtemp0 007E  
                  __CFG_MCLRE$OFF 0000                   __initialization 000F                      __end_of_main 0054  
                          ??_main 0075            __size_of_initMultiplex 0020                            _ANSELH 0189  
                          _INTCON 000B                    __CFG_PWRTE$OFF 0000                            _change 0078  
                          saved_w 007E           __end_of__initialization 0013                     _initMultiplex 0087  
                  __pcstackCOMMON 0070                    _OPTION_REGbits 0081                    ?_initMultiplex 0073  
                      __pmaintext 0017                        __pintentry 0004                        __stringtab 00A7  
                         __ptext1 0087                           __ptext2 0054                      __size_of_ISR 0033  
                         _numero_ 0075              end_of_initialization 0013                   ??_initMultiplex 0075  
                       _PORTBbits 0006                         _PORTDbits 0008                initMultiplex@valor 0073  
                       _TRISBbits 0086               start_initialization 000F                       __end_of_ISR 0087  
        __CFG_FOSC$INTRC_NOCLKOUT 0000                       __pbssCOMMON 0075                         ___latbits 0002  
        initMultiplex@SEGMENT_MAP 00AD                         __pstrings 00A7                         _contador1 0077  
               interrupt_function 0004                          _IOCBbits 0096                       __stringbase 00AC  
           __end_of_initMultiplex 00A7                __end_of__stringtab 00AD                 __CFG_BOR4V$BOR40V 0000  
                   __size_of_main 003D                        _INTCONbits 000B                          intlevel1 0000  
                       stringcode 00A7                        _OPTION_REG 0081                          stringdir 00A7  
                        stringtab 00A7  
